{
  "hash": "aed3e6949c7e804938924b958f750e17",
  "result": {
    "markdown": "---\ntitle: \"EasyTask\"\nauthor: \"Sougata Maity\"\ndate: \"2023-07-28\"\ncategories: [python, Data Analyst, Streamlit]\nimage: \"banner.jpg\"\nsubtitle: \"Custom application transforms CSV data into actionable insights with just a few clicks\"\n---\n\n\nAs a data analyst, working with a data set involves several important steps to gain insights and make informed decisions.some important or crucial aspects is:\n\n-   Data Set Summary\n-   Data Distribution\n-   Data Visualization\n-   Model building\n\nPython is a great tools to creating application easily lots of the framework are pre build to do that one of the important as respect to analyst is Streamlit.\n\nI am creating a developments application for my working purpose and I share with you and you moderate as your requirements otherwise drop a mail with changes I will help you.\n\nFive things in this application and plug in lots of useful things as per project requirements mainly this version it have:\n\n-   Upload CSV\n-   Data view tab\n-   Data Summary\n-   Univariate and Bivariate Plots\n-   Simple and Multiple regression Models\n\n![](functions.PNG){width=\"400\" height=\"95\"}\n\nIts a better practice to create a folder and inside this folders create necessary files. In this project (EasyTask) have three files 1. requirements.txt 2. app.py 3. plot.py.\n\nOpen the terminal and go through the directory with write the command\n\n\n::: {.cell}\n\n```{.r .cell-code}\npip install -r requirements.txt\n```\n:::\n\n\nDownload all the necessary python module with packages for run this projects. It is the better processes before run jump into the code at first create a virtual environments and activate this environments.\n\nThen copy and past this code on the plot.py files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport streamlit as st\nimport matplotlib.pyplot as plt\n\ndef univariateplot(plot_type, df, variable_name):\n    \n    if plot_type == 'Line Plot':\n        plt.plot(df[variable_name])\n        plt.title('Line Plot')\n        st.pyplot()\n    elif plot_type == 'Bar Plot':\n        plt.bar(df.index, df[variable_name])\n        plt.title('Bar Plot')\n        st.pyplot()\n    elif plot_type == 'Scatter Plot':\n        plt.scatter(df.index, df[variable_name])\n        plt.title('Scatter Plot')\n        st.pyplot()\n    else:\n        st.write('Select a plot type.')\n\n\ndef bivariateplot(plot_type, df, variable1, variable2):\n    if plot_type == 'Line Plot':\n        plt.plot(df[variable1], df[variable2])\n        plt.title('Line Plot')\n        st.pyplot()\n    elif plot_type == 'Bar Plot':\n        plt.bar(df[variable1], df[variable2])\n        plt.title('Bar Plot')\n        st.pyplot()\n    elif plot_type == 'Scatter Plot':\n        plt.scatter(df[variable1], df[variable2])\n        plt.title('Scatter Plot')\n        st.pyplot()\n    else:\n        st.write('Select a plot type.')\n```\n:::\n\n\nJust separate the type of plots in a .py files because it is easy to moderate as per requirements and it connect our app.py file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom plot import univariateplot, bivariateplot\n\n\ndef main():\n    # st.set_page_config(layout=\"wide\")\n    st.set_option('deprecation.showPyplotGlobalUse', False)\n\n    data_input()\n    data_output()\n\ndef data_input():\n    # Use Streamlit widgets in the sidebar to get user input\n    uploaded_file = st.sidebar.file_uploader(\"Upload a CSV file\", type=[\"csv\"])\n    if uploaded_file is not None:\n        df = pd.read_csv(uploaded_file)\n        st.session_state['uploaded_df'] = df\n      \ndef data_output():\n    if 'uploaded_df' in st.session_state:\n        df = st.session_state['uploaded_df']\n        \n        tab1, tab2, tab3, tab4 = st.tabs(\n          [\"DATA\", \"SUMMARY\", \"PLOTS\", \"REGRESSION\"])\n        with tab1:\n            if 'uploaded_df' in st.session_state:\n                df = st.session_state['uploaded_df']\n                st.write(\"\")\n                st.write(\"\")\n                st.dataframe(df)\n        with tab2:\n            st.write(\"\")\n            st.write(\"\")\n            des = df.describe()\n            st.write(des)\n\n        with tab3:\n            if 'uploaded_df' in st.session_state:\n                df = st.session_state['uploaded_df']\n\n            variable_type = st.radio(\"Choose data type:\",\n                                     (\"Univariate\", \"Bivariate\"))\n            if variable_type == \"Univariate\":\n                plot_type = st.selectbox(\n                  \"Select Plot type:\",['Line Plot', 'Bar Plot', 'Scatter Plot'])\n                variable_name = st.selectbox(\"Select a variable:\", df.columns)\n\n                st.write(\"You selected:\", plot_type, \"based on\", variable_name)\n                if st.button('Create Plot'):\n                    univariateplot(plot_type, df, variable_name)\n\n            elif variable_type == \"Bivariate\":\n                plot_type = st.selectbox(\n                  \"Select Plot type:\", ['Line Plot', 'Bar Plot', 'Scatter Plot'])\n            \n                variable_name1 = st.selectbox(\n                  \"Select x axis variable:\", df.columns)\n                \n                variable_name2 = st.selectbox(\n                  \"Select y axis variable:\", df.columns)\n\n                st.write(\"You selected:\", plot_type, \"based on\",\n                         variable_name1, \"and\", variable_name2)\n                \n                if st.button('Create Plot'):\n                    bivariateplot(plot_type, df, variable_name1, variable_name2)\n\n        with tab4:\n            dependent_variable = st.selectbox(\n              \"Select dependent variable:\", df.columns, key= \"dependent_variable\")\n            independent_variable = st.selectbox(\n              \"Select independent variable:\",df.columns,key=\"independent_variable\")\n            \n            endog_data = df[dependent_variable]\n\n            exog_data = df[independent_variable]\n            exog_data = sm.add_constant(exog_data)\n\n            if st.button(\"Create Model\"):\n                model = sm.OLS(endog_data, exog_data)\n                res = model.fit()\n                st.write(res.summary())\n\n    else:\n        st.header(\"EasyTask\")\n        st.subheader(\"Introducing our revolutionary project pre-stage idea â€“ a  seamless and user-friendly platform that transforms your CSV data into actionable insights with just a few clicks!\")\n        st.write(\"Thank you for considering me for your development needs. I am here to assist you throughout the development process. Please don't hesitate to reach out if you have any questions or require any modifications. Your satisfaction is my priority, and I am more than happy to help. Feel free to contact me anytime, and together, we can create something remarkable.\")\n        st.write(\"email id: maitysougata724@gmail.com\")\n\nif __name__ == \"__main__\":\n    main()\n```\n:::\n\n\nFor a data analyst and data scientist its a best practice to doing this types of intermediate project it give an idea how functionality run and to connect all the components.\n\n**Plots**\n\n![](uni-plot.PNG){width=\"701\"}\n\n![](bivariate-plot.PNG)\n\n**Regression Model**\n\n![](regression.PNG)\n\nAll the code share in my github page download and run. If you have any problems please let me know I am happy to help you.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}