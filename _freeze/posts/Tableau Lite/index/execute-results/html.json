{
  "hash": "70f673e5e7450fde0e735f3e4ce94abd",
  "result": {
    "markdown": "---\ntitle: \"Tableau Lite\"\nauthor: \"Sougata Maity\"\ndate: \"2023-07-28\"\ncategories: [python, analysis]\nimage: \"tableau banner.png\"\nsubtitle: \"Custom application using python streamlit and pygwalker\"\n---\n\n\nTableau is used for data visualization and business intelligence, helping users analyze and explore data through interactive visualizations. Its user-friendly interface and data connectivity allow for easy exploration of various data sources, while dashboards and data stories enable effective communication of insights. With scalability and advanced analytics capabilities, Tableau is a powerful tool for organizations to make data-driven decisions and gain valuable insights from their data.\n\nIt a separate application to doing this but some times we are need inside our python application or jupyter notebook, streamlit or any other python application framework.\n\nAs a data analyst main work to do\n\n-   Finding results as per business problems using business data.\n-   Solving research problems in a study using capture data.\n-   Curiosity about finding inside in a data set or multiple data sets.\n-   Pattern finding and model fitting based on the data.\n\nAll of them are easily recognized based on the graphical representation based on selected appropriate selecting feature (variable) and manipulation.\n\n### Streamlit application\n\nStreamlit is a Python library used to create web applications for data science and machine learning projects. With just a few lines of code, developers can transform data scripts into interactive web apps. It simplifies the process of sharing and visualizing data, making it an efficient and user-friendly tool for data scientists and developers to showcase their work and engage with end-users interactively.\n\nHere we are creating a **python** **streamlit** application using **pygwalker.**\n\nIt is a good practice to creating separate for all the project and inside folder creating and storing all necessary files. For this project creating a folder tableauLite inside this folders crating two files app.py and requirements.txt inside requirements.txt file write pandas, streamlit and pygwalker.\n\nOpen anaconda prompt set this file location and run the code **pip install -r requirements.txt** (all files are upload my github page)\n\nNow open our main app.py files and copy past this code otherwise download this file in my github page to direct run the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport streamlit as st\nimport pandas as pd\nimport pygwalker as pyg\nimport streamlit.components.v1 as components\n\ndef main():\n    st.set_page_config(layout=\"wide\")\n    custom_css = \"\"\"\n    <style>\n    body {\n        margin-top: 1px;\n    }\n    </style>\n    \"\"\"\n    st.markdown(custom_css, unsafe_allow_html=True)\n    data_input()\n    data_output()\n\ndef data_input():\n    # Use Streamlit widgets in the sidebar to get user input\n    uploaded_file = st.sidebar.file_uploader(\"Upload a CSV file\", type=[\"csv\"])\n\n    # Process the uploaded file if it exists\n    if uploaded_file is not None:\n        df = pd.read_csv(uploaded_file)\n        st.session_state['uploaded_df'] = df\n\ndef data_output():\n    if 'uploaded_df' in st.session_state:\n        df = st.session_state['uploaded_df']\n        pyg_html = pyg.walk(df, return_html=True)\n        components.html(pyg_html, height= 1000,  scrolling=True)\n   \n\nif __name__ == \"__main__\":\n    main()\n```\n:::\n\n\nFinally we have necessary files now open teminal and run **streamlit run app.py** it will start a local web server and provide you with a local URL **`http://localhost:8501`**. Open the web browser and enter this URL to access our Streamlit application.\n\nIn general now this version two tabs one is Data and another is Visualization.\n\n**Visualization Tab**\n\n![](tableau%20lite.PNG)\n\n**Data Tab**\n\n![](tableau%20lite%20data%20tab.PNG)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}