[
  {
    "objectID": "posts/EasyTask/index.html",
    "href": "posts/EasyTask/index.html",
    "title": "EasyTask",
    "section": "",
    "text": "As a data analyst, working with a data set involves several important steps to gain insights and make informed decisions.some important or crucial aspects is:\n\nData Set Summary\nData Distribution\nData Visualization\nModel building\n\nPython is a great tools to creating application easily lots of the framework are pre build to do that one of the important as respect to analyst is Streamlit.\nI am creating a developments application for my working purpose and I share with you and you moderate as your requirements otherwise drop a mail with changes I will help you.\nFive things in this application and plug in lots of useful things as per project requirements mainly this version it have:\n\nUpload CSV\nData view tab\nData Summary\nUnivariate and Bivariate Plots\nSimple and Multiple regression Models\n\n\nIts a better practice to create a folder and inside this folders create necessary files. In this project (EasyTask) have three files 1. requirements.txt 2. app.py 3. plot.py.\nOpen the terminal and go through the directory with write the command\n\npip install -r requirements.txt\n\nDownload all the necessary python module with packages for run this projects. It is the better processes before run jump into the code at first create a virtual environments and activate this environments.\nThen copy and past this code on the plot.py files\n\nimport streamlit as st\nimport matplotlib.pyplot as plt\n\ndef univariateplot(plot_type, df, variable_name):\n    \n    if plot_type == 'Line Plot':\n        plt.plot(df[variable_name])\n        plt.title('Line Plot')\n        st.pyplot()\n    elif plot_type == 'Bar Plot':\n        plt.bar(df.index, df[variable_name])\n        plt.title('Bar Plot')\n        st.pyplot()\n    elif plot_type == 'Scatter Plot':\n        plt.scatter(df.index, df[variable_name])\n        plt.title('Scatter Plot')\n        st.pyplot()\n    else:\n        st.write('Select a plot type.')\n\n\ndef bivariateplot(plot_type, df, variable1, variable2):\n    if plot_type == 'Line Plot':\n        plt.plot(df[variable1], df[variable2])\n        plt.title('Line Plot')\n        st.pyplot()\n    elif plot_type == 'Bar Plot':\n        plt.bar(df[variable1], df[variable2])\n        plt.title('Bar Plot')\n        st.pyplot()\n    elif plot_type == 'Scatter Plot':\n        plt.scatter(df[variable1], df[variable2])\n        plt.title('Scatter Plot')\n        st.pyplot()\n    else:\n        st.write('Select a plot type.')\n\nJust separate the type of plots in a .py files because it is easy to moderate as per requirements and it connect our app.py file.\n\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom plot import univariateplot, bivariateplot\n\n\ndef main():\n    # st.set_page_config(layout=\"wide\")\n    st.set_option('deprecation.showPyplotGlobalUse', False)\n\n    data_input()\n    data_output()\n\ndef data_input():\n    # Use Streamlit widgets in the sidebar to get user input\n    uploaded_file = st.sidebar.file_uploader(\"Upload a CSV file\", type=[\"csv\"])\n    if uploaded_file is not None:\n        df = pd.read_csv(uploaded_file)\n        st.session_state['uploaded_df'] = df\n      \ndef data_output():\n    if 'uploaded_df' in st.session_state:\n        df = st.session_state['uploaded_df']\n        \n        tab1, tab2, tab3, tab4 = st.tabs(\n          [\"DATA\", \"SUMMARY\", \"PLOTS\", \"REGRESSION\"])\n        with tab1:\n            if 'uploaded_df' in st.session_state:\n                df = st.session_state['uploaded_df']\n                st.write(\"\")\n                st.write(\"\")\n                st.dataframe(df)\n        with tab2:\n            st.write(\"\")\n            st.write(\"\")\n            des = df.describe()\n            st.write(des)\n\n        with tab3:\n            if 'uploaded_df' in st.session_state:\n                df = st.session_state['uploaded_df']\n\n            variable_type = st.radio(\"Choose data type:\",\n                                     (\"Univariate\", \"Bivariate\"))\n            if variable_type == \"Univariate\":\n                plot_type = st.selectbox(\n                  \"Select Plot type:\",['Line Plot', 'Bar Plot', 'Scatter Plot'])\n                variable_name = st.selectbox(\"Select a variable:\", df.columns)\n\n                st.write(\"You selected:\", plot_type, \"based on\", variable_name)\n                if st.button('Create Plot'):\n                    univariateplot(plot_type, df, variable_name)\n\n            elif variable_type == \"Bivariate\":\n                plot_type = st.selectbox(\n                  \"Select Plot type:\", ['Line Plot', 'Bar Plot', 'Scatter Plot'])\n            \n                variable_name1 = st.selectbox(\n                  \"Select x axis variable:\", df.columns)\n                \n                variable_name2 = st.selectbox(\n                  \"Select y axis variable:\", df.columns)\n\n                st.write(\"You selected:\", plot_type, \"based on\",\n                         variable_name1, \"and\", variable_name2)\n                \n                if st.button('Create Plot'):\n                    bivariateplot(plot_type, df, variable_name1, variable_name2)\n\n        with tab4:\n            dependent_variable = st.selectbox(\n              \"Select dependent variable:\", df.columns, key= \"dependent_variable\")\n            independent_variable = st.selectbox(\n              \"Select independent variable:\",df.columns,key=\"independent_variable\")\n            \n            endog_data = df[dependent_variable]\n\n            exog_data = df[independent_variable]\n            exog_data = sm.add_constant(exog_data)\n\n            if st.button(\"Create Model\"):\n                model = sm.OLS(endog_data, exog_data)\n                res = model.fit()\n                st.write(res.summary())\n\n    else:\n        st.header(\"EasyTask\")\n        st.subheader(\"Introducing our revolutionary project pre-stage idea â€“ a  seamless and user-friendly platform that transforms your CSV data into actionable insights with just a few clicks!\")\n        st.write(\"Thank you for considering me for your development needs. I am here to assist you throughout the development process. Please don't hesitate to reach out if you have any questions or require any modifications. Your satisfaction is my priority, and I am more than happy to help. Feel free to contact me anytime, and together, we can create something remarkable.\")\n        st.write(\"email id: maitysougata724@gmail.com\")\n\nif __name__ == \"__main__\":\n    main()\n\nFor a data analyst and data scientist its a best practice to doing this types of intermediate project it give an idea how functionality run and to connect all the components.\nPlots\n\n\nRegression Model\n\nAll the code share in my github page download and run. If you have any problems please let me know I am happy to help you."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Content with Code",
    "section": "",
    "text": "EasyTask\n\n\nCustom application transforms CSV data into actionable insights with just a few clicks\n\n\n\n\npython\n\n\nData Analyst\n\n\nStreamlit\n\n\n\n\n\n\n\n\n\n\n\nJul 28, 2023\n\n\nSougata Maity\n\n\n\n\n\n\n  \n\n\n\n\nTableau Lite\n\n\nCustom application using python streamlit and pygwalker\n\n\n\n\npython\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\n\nJul 28, 2023\n\n\nSougata Maity\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Tableau Lite/index.html",
    "href": "posts/Tableau Lite/index.html",
    "title": "Tableau Lite",
    "section": "",
    "text": "Tableau is used for data visualization and business intelligence, helping users analyze and explore data through interactive visualizations. Its user-friendly interface and data connectivity allow for easy exploration of various data sources, while dashboards and data stories enable effective communication of insights. With scalability and advanced analytics capabilities, Tableau is a powerful tool for organizations to make data-driven decisions and gain valuable insights from their data.\nIt a separate application to doing this but some times we are need inside our python application or jupyter notebook, streamlit or any other python application framework.\nAs a data analyst main work to do\n\nFinding results as per business problems using business data.\nSolving research problems in a study using capture data.\nCuriosity about finding inside in a data set or multiple data sets.\nPattern finding and model fitting based on the data.\n\nAll of them are easily recognized based on the graphical representation based on selected appropriate selecting feature (variable) and manipulation.\n\nStreamlit application\nStreamlit is a Python library used to create web applications for data science and machine learning projects. With just a few lines of code, developers can transform data scripts into interactive web apps. It simplifies the process of sharing and visualizing data, making it an efficient and user-friendly tool for data scientists and developers to showcase their work and engage with end-users interactively.\nHere we are creating a python streamlit application using pygwalker.\nIt is a good practice to creating separate for all the project and inside folder creating and storing all necessary files. For this project creating a folder tableauLite inside this folders crating two files app.py and requirements.txt inside requirements.txt file write pandas, streamlit and pygwalker.\nOpen anaconda prompt set this file location and run the code pip install -r requirements.txt (all files are upload my github page)\nNow open our main app.py files and copy past this code otherwise download this file in my github page to direct run the code.\n\nimport streamlit as st\nimport pandas as pd\nimport pygwalker as pyg\nimport streamlit.components.v1 as components\n\ndef main():\n    st.set_page_config(layout=\"wide\")\n    custom_css = \"\"\"\n    &lt;style&gt;\n    body {\n        margin-top: 1px;\n    }\n    &lt;/style&gt;\n    \"\"\"\n    st.markdown(custom_css, unsafe_allow_html=True)\n    data_input()\n    data_output()\n\ndef data_input():\n    # Use Streamlit widgets in the sidebar to get user input\n    uploaded_file = st.sidebar.file_uploader(\"Upload a CSV file\", type=[\"csv\"])\n\n    # Process the uploaded file if it exists\n    if uploaded_file is not None:\n        df = pd.read_csv(uploaded_file)\n        st.session_state['uploaded_df'] = df\n\ndef data_output():\n    if 'uploaded_df' in st.session_state:\n        df = st.session_state['uploaded_df']\n        pyg_html = pyg.walk(df, return_html=True)\n        components.html(pyg_html, height= 1000,  scrolling=True)\n   \n\nif __name__ == \"__main__\":\n    main()\n\nFinally we have necessary files now open teminal and run streamlit run app.py it will start a local web server and provide you with a local URL http://localhost:8501. Open the web browser and enter this URL to access our Streamlit application.\nIn general now this version two tabs one is Data and another is Visualization.\nVisualization Tab\n\nData Tab"
  }
]